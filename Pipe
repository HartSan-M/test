_G.Pipe = true

-- Loop to process all GasPipes dynamically for different sectors
while _G.Pipe do
    -- Define the sectors to process
    local sectors = {
        "PatientHousing", 
        "Sector 1", 
        "MaintenanceAndService", 
        "Sector 2",
        "Zeta Labs"
    }

    for _, sectorName in ipairs(sectors) do
        local sector = workspace:WaitForChild("Facility"):WaitForChild("Sectors"):WaitForChild(sectorName)
        
        -- Handle the different folder paths for each sector
        local pipesFolders = {}  -- To store folders for pipes
        if sectorName == "PatientHousing" then
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("Pipes"))
        elseif sectorName == "Sector 1" then
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("Pipes"))
        elseif sectorName == "MaintenanceAndService" then
            -- Add both UpperFloor and LowerFloor pipes folders
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("Power"):WaitForChild("UpperFloor"):WaitForChild("Pipes"))
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("Power"):WaitForChild("LowerFloor"):WaitForChild("Pipes"))
        elseif sectorName == "Sector 2" then
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("GasPipes"))
        elseif sectorName == "Zeta Labs" then
            table.insert(pipesFolders, sector:WaitForChild("Interactions"):WaitForChild("GasPipes"))
        end

        -- Iterate through each pipes folder (handles UpperFloor and LowerFloor for MaintenanceAndService)
        for _, pipesFolder in ipairs(pipesFolders) do
            -- Iterate over all the GasPipe instances in the folder
            for _, gasPipe in ipairs(pipesFolder:GetChildren()) do
                if gasPipe.Name == "GasPipe" then  -- Ensure it's a GasPipe
                    local boundary: Instance = gasPipe:FindFirstChild("Boundry")  -- Check if the Boundary exists
                    if boundary then
                        -- Prepare the arguments for the FireServer call
                        local args = {
                            [1] = gasPipe,
                            [2] = boundary
                        }

                        -- Fire the repair event
                        game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
                            :WaitForChild("Events"):WaitForChild("Repair")
                            :FireServer(unpack(args))
                    end
                end
            end
        end
    end

    -- Wait for a short time to prevent overloading the loop
    wait(0.1)
end
