_G.RepairWalls = true

-- Loop to process all C4Walls dynamically for different sectors
while _G.RepairWalls do
    -- Define the sectors to process
    local sectors = {
        {name = "PatientHousing", wallPath = {"Interactions", "C4Walls", "CourtyardWall"}},
        {name = "Zeta Labs", wallPath = {"Interactions", "C4Walls", "AuxArmory"}},
        {name = "Sector 1", wallPath = {"Interactions", "C4Walls", "AuxArmory"}}
    }

    for _, sectorData in ipairs(sectors) do
        local sectorName = sectorData.name
        local wallPath = sectorData.wallPath

        -- Get the sector
        local sector = workspace:WaitForChild("Facility"):WaitForChild("Sectors"):WaitForChild(sectorName)

        -- Get the specific wall folder based on the path
        local currentFolder = sector
        for _, folderName in ipairs(wallPath) do
            currentFolder = currentFolder:WaitForChild(folderName)
        end

        -- Get the Wall instance
        local wall = currentFolder:WaitForChild("Scripted"):WaitForChild("Wall"):WaitForChild("Wall")

        -- Check if the Boundary exists
        local boundary = wall:FindFirstChild("Boundry")
        if boundary then
            -- Prepare the arguments for the FireServer call
            local args = {
                [1] = wall,
                [2] = boundary
            }

            -- Fire the repair event
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes")
                :WaitForChild("Events"):WaitForChild("Repair")
                :FireServer(unpack(args))
        end
    end

    -- Wait for a short time to prevent overloading the loop
    wait(0.1)
end
